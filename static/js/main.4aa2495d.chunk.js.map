{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountrPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountrPicker/CountryPicker.module.css"],"names":["module","exports","Cards","props","display","data","confirmed","recovered","deaths","lastUpdate","Grid","item","component","Card","xs","md","className","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","container","spacing","justify","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","getData","barChart","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","options","legend","title","text","CountryPicker","handleChangeCountry","fetchCountry","setFetchCountry","fetchAPI","FormControl","formControl","NativeSelect","onChange","e","target","index","key","App","setData","setCountry","image","src","alt","ReactDOM","render","document","getElementById"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,oMC6GpJC,EAvGD,SAACC,GACb,IAAIC,EACJ,GAAID,EAAME,KAAKA,KAAM,CAAC,IAAD,EACkCF,EAAME,KAAKA,KAAxDC,EADW,EACXA,UAAWC,EADA,EACAA,UAAWC,EADX,EACWA,OAAQC,EADnB,EACmBA,WAEtCL,EACE,oCACE,kBAACM,EAAA,EAAD,CACEC,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJC,UAAWC,IAAGC,IAAOC,KAAMD,IAAOE,WAElC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKrB,EAAUsB,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKtB,GAAYuB,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKJ,kBAACf,EAAA,EAAD,CACEC,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJC,UAAWC,IAAGC,IAAOC,KAAMD,IAAOX,YAElC,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKpB,EAAUqB,MACfC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKtB,GAAYuB,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CAKJ,kBAACf,EAAA,EAAD,CACEC,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJC,UAAWC,IAAGC,IAAOC,KAAMD,IAAOV,SAElC,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKnB,EAAOoB,MACZC,SAAU,IACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKtB,GAAYuB,gBAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,8CAQRrB,EAAU,UAGZ,OACE,yBAAKY,UAAWE,IAAOe,WACrB,kBAACvB,EAAA,EAAD,CAAMuB,WAAS,EAACC,QAAS,EAAGC,QAAQ,UACjC/B,K,iBCtGHgC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJf,kBAQFG,IAAMC,IAAIF,GARR,cAQfnC,EARe,yBASdA,GATc,gCAWrBsC,QAAQC,IAAR,MAXqB,yDAAH,sDAeTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElB/B,EAFkB,EAElBA,KAEFyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CAC5C1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAMF,EAAUG,eAPQ,kBAUnBL,GAVmB,gCAY1BH,QAAQC,IAAR,MAZ0B,yDAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAIhBE,IAAMC,IAAN,UAAaN,EAAb,eAJgB,uBAGhBiB,EAHgB,EAGxBhD,KAAQgD,UAHgB,kBAMnBA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SANhB,gCAQ1BX,QAAQC,IAAR,MAR0B,yDAAH,qD,yBC2CZW,EAxED,SAAC,GAAuB,IAArBlD,EAAoB,EAApBA,KAAMiC,EAAc,EAAdA,QAAc,EACDkB,mBAAS,IADR,mBAC5BR,EAD4B,KACjBS,EADiB,KAGnCC,qBAAU,YACK,uCAAG,sBAAAnB,EAAA,kEACdkB,EADc,SACKZ,IADL,6EAAH,qDAIbc,KACC,IAEH,IAuBIC,EAvBEC,EAAYb,EAAUc,OAC1B,kBAAC,OAAD,CACEzD,KAAM,CACJ0D,OAAQf,EAAUD,KAAI,qBAAGG,QACzBc,SAAU,CACR,CACE3D,KAAM2C,EAAUD,KAAI,qBAAGzC,aACvB2D,MAAO,WACPC,YAAa,SACbC,MAAM,GAER,CACE9D,KAAM2C,EAAUD,KAAI,qBAAGvC,UACvByD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAKZ,KAIJ,OAAI9D,EAAKA,MACPuD,EACE,kBAAC,MAAD,CACEvD,KAAM,CACJ0D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CACf,uBACA,uBACA,wBAEF/D,KAAM,CACJA,EAAKA,KAAKC,UAAUsB,MACpBvB,EAAKA,KAAKE,UAAUqB,MACpBvB,EAAKA,KAAKG,OAAOoB,UAKzByC,QAAS,CACPC,OAAQ,CAAElE,SAAS,GACnBmE,MAAO,CAAEnE,SAAS,EAAMoE,KAAK,oBAAD,OAAsBlC,OASxD,yBAAKtB,UAAWE,IAAOe,WAAYK,EAAUsB,EAAWC,IAJjD,M,mCCrCIY,EA3BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACTlB,mBAAS,IADA,mBAC1CmB,EAD0C,KAC5BC,EAD4B,KAWjD,OARAlB,qBAAU,YACM,uCAAG,sBAAAnB,EAAA,kEACfqC,EADe,SACOxB,IADP,6EAAH,qDAIdyB,KACC,CAACD,IAGF,6BACE,kBAACE,EAAA,EAAD,CAAa9D,UAAWE,IAAO6D,aAC7B,kBAACC,EAAA,EAAD,CAAcC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOvD,SAC1D,4BAAQA,MAAM,IAAd,UACC+C,EAAa5B,KAAI,SAACT,EAAS8C,GAAV,OAChB,4BAAQC,IAAKD,EAAOxD,MAAOU,GACxBA,U,iBCcAgD,MA9Bf,WAAgB,IAAD,EACW9B,mBAAS,IADpB,mBACNnD,EADM,KACAkF,EADA,OAEiB/B,mBAAS,IAF1B,mBAENlB,EAFM,KAEGkD,EAFH,KAIb9B,qBAAU,YACK,uCAAG,sBAAAnB,EAAA,kEACdgD,EADc,SACAlD,IADA,6EAAH,qDAIbsB,KACC,IAEH,IAAMe,EAAmB,uCAAG,WAAOpC,GAAP,eAAAC,EAAA,sEACJF,EAAUC,GADN,OACpBqB,EADoB,OAE1B4B,EAAQ5B,GACR6B,EAAWlD,GAHe,2CAAH,sDAQzB,OACE,yBAAKtB,UAAWE,IAAOe,WACrB,yBAAKjB,UAAWE,IAAOuE,MAAOC,IAJtB,qCAIgCC,IAAI,aAC5C,kBAAC,EAAD,CAAOtF,KAAMA,IACb,kBAAC,EAAD,CAAeqE,oBAAqBA,IACpC,kBAAC,EAAD,CAAOrE,KAAMA,EAAMiC,QAASA,MC7BlCsD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCHjD/F,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC","file":"static/js/main.4aa2495d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__L4gNQ\",\"card\":\"Cards_card__A8kuo\",\"infected\":\"Cards_infected__hTRS3\",\"recovered\":\"Cards_recovered__26ANQ\",\"deaths\":\"Cards_deaths__jN1TU\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport cx from \"classnames\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = (props) => {\r\n  let display;\r\n  if (props.data.data) {\r\n    const { confirmed, recovered, deaths, lastUpdate } = props.data.data;\r\n\r\n    display = (\r\n      <>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </>\r\n    );\r\n  } else {\r\n    display = \"Loading\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        {display}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const data = await axios.get(changeableUrl);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let barChart;\r\n\r\n  if (data.data) {\r\n    barChart = (\r\n      <Bar\r\n        data={{\r\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n          datasets: [\r\n            {\r\n              label: \"People\",\r\n              backgroundColor: [\r\n                \"rgba(255, 0, 0, 0.5)\",\r\n                \"rgba(0, 255, 0, 0.5)\",\r\n                \"rgba(0, 0, 255, 0.5)\",\r\n              ],\r\n              data: [\r\n                data.data.confirmed.value,\r\n                data.data.recovered.value,\r\n                data.data.deaths.value,\r\n              ],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleChangeCountry }) => {\r\n  const [fetchCountry, setFetchCountry] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchCountry(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchCountry]);\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect onChange={(e) => handleChangeCountry(e.target.value)}>\r\n          <option value=\"\">Global</option>\r\n          {fetchCountry.map((country, index) => (\r\n            <option key={index} value={country}>\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport CountryPicker from \"./components/CountrPicker/CountryPicker\";\r\n\r\nimport { fetchData } from \"./api\";\r\nimport styles from \"./App.module.css\";\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      setData(await fetchData());\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  const handleChangeCountry = async (country) => {\r\n    const getData = await fetchData(country);\r\n    setData(getData);\r\n    setCountry(country);\r\n  };\r\n\r\n  const url = \"https://i.ibb.co/7QpKsCX/image.png\";\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <img className={styles.image} src={url} alt=\"Covid-19\" />\r\n      <Cards data={data} />\r\n      <CountryPicker handleChangeCountry={handleChangeCountry} />\r\n      <Chart data={data} country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3YrGB\",\"image\":\"App_image__Meda3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3tfnn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__e3U1n\"};"],"sourceRoot":""}